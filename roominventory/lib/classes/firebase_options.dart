// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// This file contains the configuration settings for Firebase services
/// across different platforms. It is automatically generated by the
/// FlutterFire CLI and should not be modified manually.
///
/// ## Usage:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
///
/// ## Platform Support:
/// - ✅ Android: Fully configured
/// - ✅ iOS: Fully configured
/// - ❌ Web: Not configured (throws UnsupportedError)
/// - ❌ macOS: Not configured (throws UnsupportedError)
/// - ❌ Windows: Not configured (throws UnsupportedError)
/// - ❌ Linux: Not configured (throws UnsupportedError)
///
/// ## Security Note:
/// The API keys in this file are intended for use in your app's client code.
/// For additional security, consider implementing Firebase App Check
/// and using Firebase Security Rules for backend services.
class DefaultFirebaseOptions {
  /// Returns the appropriate [FirebaseOptions] for the current platform.
  ///
  /// Automatically selects the correct configuration based on the
  /// platform where the app is running.
  ///
  /// ## Returns:
  /// [FirebaseOptions] configured for the current platform
  ///
  /// ## Throws:
  /// [UnsupportedError] if the platform is not configured
  ///
  /// ## Example:
  /// ```dart
  /// final options = DefaultFirebaseOptions.currentPlatform;
  /// await Firebase.initializeApp(options: options);
  /// ```
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  /// Firebase configuration for Android platform.
  ///
  /// ## Configuration Includes:
  /// - API Key: Authentication key for Firebase services
  /// - App ID: Unique identifier for the Android app
  /// - Messaging Sender ID: For Firebase Cloud Messaging
  /// - Project ID: Firebase project identifier
  /// - Storage Bucket: Cloud Storage bucket URL
  ///
  /// ## Usage:
  /// These credentials allow the Android app to access:
  /// - Firebase Authentication
  /// - Cloud Firestore
  /// - Cloud Storage
  /// - Firebase Cloud Messaging
  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyAEiOvG0Bv-FDIVkLGs8YgwcrnMDQbQjxA',
    appId: '1:981718913802:android:c823a88c8adf2d501820f3',
    messagingSenderId: '981718913802',
    projectId: 'login-e6369',
    storageBucket: 'login-e6369.firebasestorage.app',
  );

  /// Firebase configuration for iOS platform.
  ///
  /// ## Configuration Includes:
  /// - API Key: Authentication key for Firebase services
  /// - App ID: Unique identifier for the iOS app
  /// - Messaging Sender ID: For Firebase Cloud Messaging
  /// - Project ID: Firebase project identifier
  /// - Storage Bucket: Cloud Storage bucket URL
  /// - Android Client ID: OAuth 2.0 client ID for Android (for cross-platform auth)
  /// - iOS Client ID: OAuth 2.0 client ID for iOS
  /// - iOS Bundle ID: The bundle identifier of the iOS app
  ///
  /// ## Usage:
  /// These credentials allow the iOS app to access:
  /// - Firebase Authentication (with Google Sign-In)
  /// - Cloud Firestore
  /// - Cloud Storage
  /// - Firebase Cloud Messaging
  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyBUnZzNvUM6ySQmjIAwQAR4zU4kRjAsaDs',
    appId: '1:981718913802:ios:2a1641d121a67bfc1820f3',
    messagingSenderId: '981718913802',
    projectId: 'login-e6369',
    storageBucket: 'login-e6369.firebasestorage.app',
    androidClientId:
        '981718913802-jvbb6fmo0o0mt64sgoohbfn1nu4spmet.apps.googleusercontent.com',
    iosClientId:
        '981718913802-j4ifvrc053qdbbn5m3r6l0j1h9069hsp.apps.googleusercontent.com',
    iosBundleId: 'com.example.roominventory',
  );
}
